{
"name": "Grover's Algorithm",
"content": "// QScript version of an example from libquantum library.\n \n VectorSize 8\n \n // This is the value we are searching for.\n target = 5\n // Register width must hold the value.\n regwidth = 3\n \n proc Oracle\n \n for i = 0; i < regwidth; i++\n   if !(target & (1 << i))\n     SigmaX i\n   endif\n endfor\n \n Toffoli 0, 1, regwidth + 1\n \n for i = 1; i < regwidth; i++\n     Toffoli i, regwidth + i, regwidth + i + 1\n endfor\n \n CNot regwidth + i, regwidth\n \n for i = regwidth - 1; i > 0; i--\n     Toffoli i, regwidth + i, regwidth + i + 1\n endfor\n \n Toffoli 0, 1, regwidth + 1\n \n for i = 0; i < regwidth; i++\n   if !(target & (1 << i))\n     SigmaX i\n   endif\n endfor\n endproc\n \n proc Inversion\n for i = 0; i < regwidth; i++\n     SigmaX i\n endfor\n \n Hadamard regwidth - 1\n \n if regwidth == 3\n     Toffoli 0, 1, 2\n else\n     Toffoli 0, 1, regwidth+1\n \n for i = 1; i < regwidth-1; i++\n     Toffoli i, regwidth + i, regwidth + i + 1\n endfor\n \n CNot regwidth + i, regwidth - 1\n \n for i = regwidth - 2; i > 0; i--\n     Toffoli i, regwidth + i, regwidth + i + 1\n endfor\n \n Toffoli 0, 1, regwidth + 1\n endif\n \n Hadamard regwidth - 1\n \n for i = 0; i < regwidth; i++\n     SigmaX i\n endfor\n endproc\n \n proc Iteration\n Oracle\n \n for i = 0; i < regwidth; i++\n     Hadamard i\n endfor\n \n Inversion\n \n for i = 0; i < regwidth; i++\n     Hadamard i\n endfor\n endproc\n \n SigmaX regwidth\n \n for i = 0; i <= regwidth; i++\n     Hadamard i\n endfor\n \n for i = 1; i <= Math.PI/4*Math.sqrt(1 << regwidth); i++\n     Iteration\n endfor\n \n Hadamard regwidth\n \n MeasureBit regwidth\n Measure\n \n Display \"<h2>Found: \" + measured_value"
}