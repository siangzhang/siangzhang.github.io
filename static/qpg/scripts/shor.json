{
"name": "Shor's Algorithm",
"content": "// Based on C++ code from libquantum library.\n  \n  proc FindFactors N\n    x = 0\n  \n    if N < 15\n      Print \"Invalid number!\"\n      Breakpoint\n    endif\n  \n    width = QMath.getWidth(N)\n    \n    Delay 1\n    \n    for x; (QMath.gcd(N, x) > 1) || (x < 2); x\n      x = Math.floor(Math.random() * 10000) % N\n    endfor\n  \n    Print \"Random seed: \" + x\n  \n    Delay 50\n    \n    for i = 0; i < width; i++\n      Hadamard i\n    endfor\n    \n    Breakpoint\n    \n    ExpModN x, N, width\n    \n    Breakpoint\n    \n    for i = 0; i < width; i++\n      MeasureBit width + i\n    endfor\n    \n    Breakpoint\n    \n    QFT 0, width\n    \n    Delay 1\n    \n    for trycnt = 10; trycnt >= 0; trycnt--\n      Measure\n      c = measured_value\n  \n      if c == 0\n        Print \"Measured zero, try again.\"\n        continue\n      endif\n  \n      q = 1 << width\n      \n      Print \"Measured c/q = \" + c + \"/\" + q + \" â‰ˆ \" + c/q\n  \n      tmp = QMath.fracApprox(c, q, width)\n  \n      c = tmp[0]\n      q = tmp[1]\n      \n      if c < 0\n          c *= -1\n      endif\n      \n      if q < 0\n          q *= -1\n      endif\n      \n      Print \"Fractional approximation is \" + c + \"/\" + q\n      \n      if (q % 2 == 1) && (2 * q < (1 << width))\n        Print \"Odd denominator, trying to expand by 2.\"\n        q *= 2\n      endif\n  \n      if q % 2 == 1\n        Print \"Odd period, try again.\"\n        continue\n      endif\n      \n      Print \"Possible period is \" + q\n  \n      a = QMath.ipow(x, q / 2) + 1 % N\n      b = QMath.ipow(x, q / 2) - 1 % N\n  \n      a = QMath.gcd(N, a)\n      b = QMath.gcd(N, b)\n  \n      if a > b\n        factor = a\n      else\n        factor = b\n      endif\n     Print \"factor = \" + factor\n  \n      if (factor < N) && (factor > 1)\n        Display \"<h2>Success: \" + factor + \" \" + N / factor\n        Breakpoint\n      else\n        Print \"Unable to determine factors, try again.\"\n        continue\n      endif\n    endfor\n  endproc\n  \n  VectorSize 16\n  FindFactors 143"
}