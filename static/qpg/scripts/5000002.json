{
"name": "Built-in Quantum Gates",
"content": "// This example demonstrates built-in quantum gates.\n //\n VectorSize 8\n \n // Hadamard gate.\n Hadamard 0\n \n // Sigma gates.\n SigmaX 1\n SigmaY 2\n SigmaZ 3\n \n // Rotation gates.\n Rx 4, Math.PI / 8\n Ry 5, Math.PI / 6\n Rz 6, Math.PI / 3\n \n // Phase shift gate.\n Phase 7, Math.PI / 4\n \n // Controlled gates.\n CNot 0, 1\n Toffoli 1, 2, 3\n CPhase 4, 5, Math.PI / 5\n \n // Swap gate.\n Swap 6, 7\n \n // Unitary gate.\n // Parameters: qubit, re00, im00, re01, im01, re10, ...\n Unitary 0, 0, 0, 1, 0, -1, 0, 0, 0\n \n // QFT gates.\n // First parameter is starting qbit.\n // Second parameter is width of QFT (in qbits).\n QFT 0, 4\n InvQFT 4, 4\n // First parameter is control qbit, second is target.\n QFTCPhase 3, 0\n InvQFTCPhase 4, 2\n \n // ExpModN gate, calculates x^k mod N.\n // First parameter is the x value, second is the N value,\n // third is the width of the first register (k).\n // Assumes that second register is initialized to 0.\n ExpModN 7, 15, 4\n \n // RevExpModN gate, calculates k^x mod N.\n // First parameter is the x value, second is the N value,\n // third is the width of the first register (k).\n // Assumes that second register is initialized to 0.\n RevExpModN 7, 15, 4\n \n // Apply decoherence (random phase shifts to qbit states).\n // Parameter controls strength (reasonable range: 0.1 - 1).\n Decoherence 0.3\n \n // Shifting gates.\n ShiftLeft 2\n ShiftRight 1\n \n // Measuring gates.\n // Bit measuring partially collapses the state.\n MeasureBit 2\n Print measured_value\n \n // State measuring does not collapse the state.\n Measure\n Print measured_value"
}